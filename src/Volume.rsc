module Volume

// Project imports
import Utility;
import LineAnalysis;

// Rascal base imports
import Set;
import List;
import Map;

import IO;
import String;
 
// M3 imports
import lang::java::m3::Core;
import lang::java::m3::AST;
import lang::java::jdt::m3::Core;
import lang::java::jdt::m3::AST;

//---------------
// 1 - LOC METRIC
//---------------

@doc {
	.Synopsis
	The function calculates how many Lines Of Code (LOC) the files are made of. 
}
int countLinesFiles(list[loc] fileLocs, bool print) {
	int code = 0;
	int empty = 0;
	int comment = 0;
	int total = 0;
	for (fileLoc <- fileLocs) {
		<c, e, m, a> = countLines(fileLoc);
		code += c;
		empty += e;
		comment += m;
		total += a;
	}
	if (print) {
		println("<code>, <empty>, <comment>");
		println("<code + empty + comment> == <totala>");
	}
	return code;	
}

//----------------------
// 2 - MM RANKING METRIC
//----------------------

@doc {
	.Synopsis
	The function depends on the LOC generated by <<countLinesFiles>> which is then ranked against a
	known database of LOC averages, from the SPR LLC function point to man months table.
}
int getLocRank(int locs, bool print) {
	return scoreRank(locs, 66000, 246000, 665000, 1310000, print);
}